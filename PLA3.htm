<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html><head>












  
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

  
  <meta name="Author" content="John Coffey">

  
  <meta name="GENERATOR" content="Mozilla/4.61 [en] (WinNT; U) [Netscape]"><title>Object-Oriented Programming</title></head><body>
<center><b>COP4020: Programming Languages</b> <br> <b>Programming Project # 3</b><br> <b>John W. Coffey</b></center>
<p><b>Object-oriented Programming in Python.</b></p>
<p style="font-weight: bold;">Introduction</p>
<p>Recall that we defined an FSA as an abstract machine that reads as
input a string of symbols and decides whether to accept or reject the
input string. We represented an FSA as a graph with directed, labeled
arcs, two types of nodes (final and non-final states), and a unique
start state. The FSA accepts a string if, starting from the start
state, the automaton can be in a final state after having read the
whole input string.</p>
<p>Consider the following FSA:</p>
<p><img src="fsa.jpg" alt="Picture of an FSA" title="Picture of an FSA"></p>
<p></p>
<p>It could be represented (for instance, in a data file) by the following:<br> <br> 5; x,y,z,a;(0:0:x),(0:1:y),(1:2:x),(2:2:x),(2:3:y),(3:3:x),(3:4:z),(4:4:x),(4:1:a);0;1,3;<br> <br> where:</p>
<ul>
<li>5; represents the number of states</li>
<li>x,y,z; represents the alphabet</li>
<li>(0:0:x),(0:1:y),(1:2:x),(2:2:x),(2:3:y),(3:3:x),(3:4:z),(4:4:x),(4:1:a); represent the state transitions</li>
<li>0; represents the start state</li>
<li>1,3; represent the accept states</li>
</ul>
<p>An example of a legal input string is: <span style="font-weight: bold; font-family: monospace;">xxxxxyxxxyxxxzxxxa&nbsp;</span></p>
<p><b>Project specifications:</b></p>
<p>Your objective is to develop an <span style="font-style: italic;">object-oriented </span>Python program running on <span style="font-family: monospace;">Windows</span> in <span style="font-family: monospace;">Python 3</span>, as follows: A
program that reads:</p>
<ul>
  <li>a file representing an FSA in the format specified above</li>
  <li>a string of
chars <br>
  </li>
</ul>
<p>and reports if the string is legal or not according to the FSA.</p>

<p>Additionally, your program must draw the FSA in a window using a simplified scheme that looks like this:</p>
<p></p>
<p><img src="FSADrawing.png" alt="Project output image" title="Project output image"></p>
<p>Your program does not have to show how the string is processed in the drawing.<span style="font-weight: bold;"><br> </span></p>
<p><span style="font-weight: bold;">NOTE:</span> Do not hard-code your program to solve the&nbsp;FSA above. It should be able to process any specified FSA.</p>
<ul></ul>
<p><span style="font-weight: bold;">Error Checking<br> </span>Your program should also check as it reads the fsa to process. It should
properly handle characters in the input string to be checked which are
not part of the grammar's alphabet, transitions to illegal or
non-existent states, etc.<span style="font-weight: bold;"><br> <br> </span></p>
<p><span style="font-weight: bold;">Input and Output</span></p>
<p>Provide a script: <span style="font-family: monospace;">run.bat. </span>The <span style="font-family: monospace;">.bat</span> file will produce a two runs of your program. <span style="font-family: monospace;"></span><br>
</p>
<div style="margin-left: 40px; font-family: monospace;">python fsa.py fsa.txt legal1.txt<br>
python fsa.py fsa.txt illegal1.txt<br>
</div>
<p>where:</p>
<ul>
  <li><span style="font-family: monospace;">python</span> runs the python interpreter</li>
  <li><span style="font-family: monospace;">fsa.py</span> is your program that reads<span style="font-family: monospace;"> fsa.txt</span> and <span style="font-family: monospace;">legal1.txt</span>, draws the fsa and processes the string</li>
  <li><span style="font-family: monospace;">fsa.txt</span> contains the fsa specification</li>
  <li><span style="font-family: monospace;">(il)legal1.txt</span> would be a string of characters to be processed<br>
  </li>
</ul>
<p>Executing the script will cause your program to read the fsa
specification into any representation you wish so long as your program
is object-oriented. Your program will draw
the graphical representation of the fsa and
process the string, reporting success for the legal string and failure
for the illegal one to the console. Understand that I will copy a
diferent FSA and string file in as part of testing, so DO NOT hard-code
your program.<br>
</p>

<p><span style="font-weight: bold;">Design Considerations</span></p>
<p>This program will use Python to load and represent the FSA and to
evaluate strings. Project 4 will extend this program. In
project 4, you will still need to read the FSA using code you
have developed here. However, that project will generate code in
another programming language that will solve the FSA. Consequently, you
should carefully consider how you will factor this program for reuse in project 4.&nbsp;</p>
<p><span style="font-weight: bold;">Programming environment:</span> We
will work on Windows for this project. You may use a Python IDE if you
wish but be sure your program can execute from the script as specified
above.<br>
</p>
<p style="font-weight: bold;">Deliverables</p>
<p>1. Python code for your program. It should adhere to good programming conventions.<br> 2. The required files: <span style="font-family: monospace;">fsa.txt, legal.txt, illegal.txt, </span>and <span style="font-family: monospace;">run.bat</span>.<span style="font-family: monospace;"><br>
</span></p>

<p><b>Submission:&nbsp; </b><span style="font-weight: bold;"></span><br>
<br>1. Run your program one last time before submitting it. Your program must run on Windows.<br>

2. Place every file in your submission in a SINGLE DIRECTORY named <span style="font-family: monospace;">&lt;last name&gt;&lt;firstinitial&gt;</span>. For instance, I
would create directory:<br>
 &nbsp;&nbsp;&nbsp;&nbsp; coffeyj.<br>
3. zip
that FOLDER into a .zip file with the SAME NAME. This means that inside
your zip file, you will have exactly one folder (from the example:
coffeyj) showing at the top level. Inside that folder will be ALL
the files in your project.<br>
 4. DO NOT make separate folders for
documentation and source files (or anything else) inside the main
folder. Having such a setup simply necessitates more navigation time to
get where we need to go to grade.<br>
 5. Any needed input files should be in the top-level folder along with the source code.<br>

6. MacOS users - remove the _MacOS_ utility folder before you zip up
the file. If you cannot, delete it from the archive once the archive is
created. It just takes up space and is not needed for anything we do
with your submissions.<br>
7. Login to UWF's Canvas system. Select our course.<br>

8. Go to the appropriate assignment, choose your program file and click the "Upload Assignment" button.<br>

9. Upload your file. Check to insure that the file was uploaded.<br>

10. Be sure to review the university policy on academic dishonesty. This is an individual project</p>
<p>Please review the policy on ACADEMIC MISCONDUCT. This is an <i>individual assignment.</i></p>
<p></p>
<p></p>
<p></p>
</body></html>